package com.gitlab.kordlib.common.entity

import com.gitlab.kordlib.common.entity.optional.Optional
import com.gitlab.kordlib.common.entity.optional.OptionalBoolean
import com.gitlab.kordlib.common.entity.optional.OptionalInt
import com.gitlab.kordlib.common.entity.optional.OptionalSnowflake
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * Represents [a message sent in a channel within Discord](https://discord.com/developers/docs/resources/channel#message-object).
 *
 * @param id id of the message.
 * @param channelId id of the channel the message was sent in.
 * @param guildId id of the guild the message was sent in.
 * @param author The author of this message.
 *
 * The author is only a valid user in the case where the message is generated by a user or bot user.
 *
 * If the message is generated by a webhook, the author object corresponds to the webhook's
 * [DiscordWebhook.id], [DiscordWebhook.name], and [DiscordWebhook.avatar].
 * You can tell if a message is generated by a webhook by checking for the [webhookId] on the message object.
 *
 * @param member Member properties for this message's author.
 *
 * It only exists in MESSAGE_CREATE and MESSAGE_UPDATE events from text-based guild channels.
 *
 * @param content Contents of the message.
 * @param editedTimestamp When this message was edited, null if never.
 * @param tts Whether this was a text-to-speech message.
 * @param mentionEveryone Whether this message mentions everyone.
 * @param mentions Users specifically mentioned in the message.
 * @param mentionRoles Roles specifically mentioned in this message.
 * @param mentionedChannels Channels specifically mentioned in this message.
 *
 * Not all channel mentions in a message will appear in [mentionedChannels]:
 * * Only textual channels that are visible to everyone in a lurkable guild will ever be included.
 * * Only crossposted messages (via Channel Following) currently include [mentionedChannels] at all.
 *
 * If no mentions in the message meet these requirements, this field will not be sent.
 *
 * @param attachments Any attached files.
 * @param embeds Any embedded content.
 * @param reactions reactions to the message.
 * @param nonce Used for validating a message was sent.
 * @param pinned Whether this message is pinned.
 * @param webhookId If the message is generated by a webhook, this is the webhook's id.
 * @param type Type of message.
 * @param activity Sent with Rich Presence-related chat embeds.
 * @param application Sent with Rich Presence-related chat embeds.
 * @param messageReference Reference data sent with crossposted messages.
 * @param flags Message flags.
 */
@Serializable
data class DiscordMessage(
        val id: Snowflake,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
        val author: DiscordUser,
        val member: Optional<DiscordGuildMember> = Optional.Missing(),
        val content: String,
        val timestamp: String,
        @SerialName("edited_timestamp")
        val editedTimestamp: String?,
        val tts: Boolean,
        @SerialName("mention_everyone")
        val mentionEveryone: Boolean,
        val mentions: List<DiscordOptionallyMemberUser>,
        @SerialName("mention_roles")
        val mentionRoles: List<Snowflake>,
        @SerialName("mention_channels")
        val mentionedChannels: Optional<List<MentionedChannel>> = Optional.Missing(),
        val attachments: List<DiscordAttachment>,
        val embeds: List<DiscordEmbed>,
        val reactions: Optional<List<Reaction>> = Optional.Missing(),
        val nonce: Optional<String> = Optional.Missing(),
        val pinned: Boolean,
        @SerialName("webhook_id")
        val webhookId: OptionalSnowflake = OptionalSnowflake.Missing,
        val type: MessageType,
        val activity: Optional<MessageActivity> = Optional.Missing(),
        val application: Optional<MessageApplication> = Optional.Missing(),
        @SerialName("message_reference")
        val messageReference: Optional<DiscordMessageReference> = Optional.Missing(),
        val flags: Optional<MessageFlags> = Optional.Missing(),
)

@Serializable
data class DiscordPartialMessage(
        val id: Snowflake,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
        val author: Optional<DiscordUser> = Optional.Missing(),
        val member: Optional<DiscordGuildMember> = Optional.Missing(),
        val content: Optional<String> = Optional.Missing(),
        val timestamp: Optional<String> = Optional.Missing(),
        @SerialName("edited_timestamp")
        val editedTimestamp: Optional<String?> = Optional.Missing(),
        val tts: OptionalBoolean = OptionalBoolean.Missing,
        @SerialName("mention_everyone")
        val mentionEveryone: OptionalBoolean = OptionalBoolean.Missing,
        val mentions: Optional<List<DiscordOptionallyMemberUser>> = Optional.Missing(),
        @SerialName("mention_roles")
        val mentionRoles: Optional<List<Snowflake>> = Optional.Missing(),
        @SerialName("mention_channels")
        val mentionedChannels: Optional<List<MentionedChannel>> = Optional.Missing(),
        val attachments: Optional<List<DiscordAttachment>> = Optional.Missing(),
        val embeds: Optional<List<DiscordEmbed>> = Optional.Missing(),
        val reactions: Optional<List<Reaction>> = Optional.Missing(),
        val nonce: Optional<String> = Optional.Missing(),
        val pinned: OptionalBoolean = OptionalBoolean.Missing,
        @SerialName("webhook_id")
        val webhookId: OptionalSnowflake = OptionalSnowflake.Missing,
        val type: Optional<MessageType> = Optional.Missing(),
        val activity: Optional<MessageActivity> = Optional.Missing(),
        val application: Optional<MessageApplication> = Optional.Missing(),
        @SerialName("message_reference")
        val messageReference: Optional<DiscordMessageReference> = Optional.Missing(),
        val flags: Optional<MessageFlags> = Optional.Missing(),
)

@Serializable
data class DiscordMessageReference(
        @SerialName("message_id")
        val id: OptionalSnowflake = OptionalSnowflake.Missing,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
)

@Serializable
data class MentionedChannel(
        val id: Snowflake,
        @SerialName("guild_id")
        val guildId: Snowflake,
        val type: MessageType,
        val name: String,
)

enum class MessageFlag(val code: Int) {
    CrossPosted(1),
    IsCrossPost(2),
    SuppressEmbeds(4),
    SourceMessageDeleted(8),
    Urgent(16);
}

@Serializable(with = MessageFlags.Serializer::class)
data class MessageFlags internal constructor(val code: Int) {

    val flags = MessageFlag.values().filter { code and it.code != 0 }

    operator fun contains(flag: MessageFlag) = flag in flags

    operator fun plus(flags: MessageFlags): MessageFlags = when {
        code and flags.code == flags.code -> this
        else -> MessageFlags(this.code or flags.code)
    }

    operator fun minus(flag: MessageFlag): MessageFlags = when {
        code and flag.code == flag.code -> MessageFlags(code xor flag.code)
        else -> this
    }

    inline fun copy(block: Builder.() -> Unit): MessageFlags {
        val builder = Builder(code)
        builder.apply(block)
        return builder.flags()
    }

    companion object {
        inline operator fun invoke(builder: Builder.() -> Unit): MessageFlags {
            return Builder().apply(builder).flags()
        }
    }

    internal object Serializer : KSerializer<MessageFlags> {

        override val descriptor: SerialDescriptor = PrimitiveSerialDescriptor("flags", PrimitiveKind.INT)

        override fun deserialize(decoder: Decoder): MessageFlags {
            val flags = decoder.decodeInt()
            return MessageFlags(flags)
        }

        override fun serialize(encoder: Encoder, value: MessageFlags) {
            encoder.encodeInt(value.code)
        }
    }

    class Builder(internal var code: Int = 0) {
        operator fun MessageFlag.unaryPlus() {
            this@Builder.code = this@Builder.code or code
        }

        operator fun MessageFlag.unaryMinus() {
            if (this@Builder.code and code == code) {
                this@Builder.code = this@Builder.code xor code
            }
        }

        fun flags() = MessageFlags(code)
    }

}

@Serializable
data class DiscordAttachment(
        val id: Snowflake,
        val filename: String,
        val size: Int,
        val url: String,
        @SerialName("proxy_url")
        val proxyUrl: String,
        /*
        Do not trust the docs:
        2020-11-06 This field is marked as nullable but can be missing instead.
        */
        val height: OptionalInt? = OptionalInt.Missing,
        /*
        Do not trust the docs:
        2020-11-06 This field is marked as nullable but can be missing instead.
        */
        val width: OptionalInt? = OptionalInt.Missing,
)

@Serializable
data class DiscordEmbed(
        val title: Optional<String> = Optional.Missing(),
        @Suppress("DEPRECATION")
        val type: Optional<EmbedType> = Optional.Missing(),
        val description: Optional<String> = Optional.Missing(),
        val url: Optional<String> = Optional.Missing(),
        val timestamp: Optional<String> = Optional.Missing(),
        val color: OptionalInt = OptionalInt.Missing,
        val footer: Optional<Footer> = Optional.Missing(),
        val image: Optional<Image> = Optional.Missing(),
        val thumbnail: Optional<Thumbnail> = Optional.Missing(),
        val video: Optional<Video> = Optional.Missing(),
        val provider: Optional<Provider> = Optional.Missing(),
        val author: Optional<Author> = Optional.Missing(),
        val fields: Optional<List<Field>> = Optional.Missing(),
) {

    @Serializable
    data class Footer(
            val text: String,
            @SerialName("icon_url")
            val iconUrl: Optional<String> = Optional.Missing(),
            @SerialName("proxy_icon_url")
            val proxyIconUrl: Optional<String> = Optional.Missing(),
    )

    @Serializable
    data class Image(
            val url: Optional<String> = Optional.Missing(),
            @SerialName("proxy_url")
            val proxyUrl: Optional<String> = Optional.Missing(),
            val height: OptionalInt = OptionalInt.Missing,
            val width: OptionalInt = OptionalInt.Missing,
    )

    @Serializable
    data class Thumbnail(
            val url: Optional<String> = Optional.Missing(),
            @SerialName("proxy_url")
            val proxyUrl: Optional<String> = Optional.Missing(),
            val height: OptionalInt = OptionalInt.Missing,
            val width: OptionalInt = OptionalInt.Missing,
    )

    @Serializable
    data class Video(
            val url: Optional<String> = Optional.Missing(),
            val height: OptionalInt = OptionalInt.Missing,
            val width: OptionalInt = OptionalInt.Missing
    )

    @Serializable
    data class Provider(
            val name: Optional<String> = Optional.Missing(),
            val url: Optional<String> = Optional.Missing()
    )

    @Serializable
    data class Author(
            val name: Optional<String> = Optional.Missing(),
            val url: Optional<String> = Optional.Missing(),
            @SerialName("icon_url")
            val iconUrl: Optional<String> = Optional.Missing(),
            @SerialName("proxy_icon_url")
            val proxyIconUrl: Optional<String> = Optional.Missing(),
    )

    @Serializable
    data class Field(
            val name: String,
            val value: String,
            val inline: OptionalBoolean = OptionalBoolean.Missing
    )
}

@Suppress("DEPRECATION")
@Deprecated("""
    Embed types are "loosely defined" and, for the most part, are not used by clients for rendering. 
    Embed attributes power what is rendered. 
    Embed types should be considered deprecated and might be removed in a future API version.
""")
@Serializable(with = EmbedType.Serializer::class)
sealed class EmbedType(val value: String) {
    class Unknown(value: String) : EmbedType(value)
    object Rich : EmbedType("rich")
    object Image : EmbedType("image")
    object Video : EmbedType("video")
    object Gifv : EmbedType("gifv")
    object Article : EmbedType("article")
    object Link : EmbedType("link")


    internal object Serializer: KSerializer<EmbedType> {
        override val descriptor: SerialDescriptor
            get() = PrimitiveSerialDescriptor("Kord.EmbedType", PrimitiveKind.STRING)

        override fun deserialize(decoder: Decoder): EmbedType = when(val value = decoder.decodeString()) {
            "rich" -> Rich
            "image" -> Image
            "video" -> Video
            "gifv" -> Gifv
            "article" -> Article
            "Link" -> Link
            else -> Unknown(value)
        }

        override fun serialize(encoder: Encoder, value: EmbedType) {
            encoder.encodeString(value.value)
        }
    }

}

@Serializable
data class Reaction(
        val count: Int,
        val me: Boolean,
        val emoji: DiscordEmoji,
)

@Serializable
data class MessageActivity(
        val type: MessageActivityType,
        @SerialName("party_id")
        val partyId: Optional<String> = Optional.Missing()
)

@Serializable(with = MessageActivityType.Serializer::class)
sealed class MessageActivityType(val value: Int) {
    class Unknown(value: Int): MessageActivityType(value)
    object Join : MessageActivityType(1)
    object Spectate : MessageActivityType(2)
    object Listen : MessageActivityType(3)
    object JoinRequest : MessageActivityType(5)

    internal object Serializer : KSerializer<MessageActivityType>{
        override val descriptor: SerialDescriptor
            get() = PrimitiveSerialDescriptor("Kord.MessageActivivtyType", PrimitiveKind.INT)

        override fun deserialize(decoder: Decoder): MessageActivityType = when(val value = decoder.decodeInt()){
            1 -> Join
            2 -> Spectate
            3 -> Listen
            5 -> JoinRequest
            else -> Unknown(value)
        }

        override fun serialize(encoder: Encoder, value: MessageActivityType) {
            encoder.encodeInt(value.value)
        }
    }
}

@Serializable
data class MessageApplication(
        val id: Snowflake,
        @SerialName("cover_image")
        val coverImage: Optional<String> = Optional.Missing(),
        val description: String,
        val icon: String? = null,
        val name: String,
)

@Serializable
data class DeletedMessage(
        val id: Snowflake,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
)

@Serializable
data class BulkDeleteData(
        val ids: List<Snowflake>,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
)

@Serializable
data class MessageReactionAddData(
        @SerialName("user_id")
        val userId: Snowflake,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("message_id")
        val messageId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
        val member: Optional<DiscordGuildMember> = Optional.Missing(),
        val emoji: DiscordPartialEmoji,
)

@Serializable
data class MessageReactionRemoveData(
        @SerialName("user_id")
        val userId: Snowflake,
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("message_id")
        val messageId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
        val emoji: DiscordPartialEmoji,
)

@Serializable
data class AllRemovedMessageReactions(
        @SerialName("channel_id")
        val channelId: Snowflake,
        @SerialName("message_id")
        val messageId: Snowflake,
        @SerialName("guild_id")
        val guildId: OptionalSnowflake = OptionalSnowflake.Missing,
)

@Serializable(with = MessageType.MessageTypeSerializer::class)
enum class MessageType(val code: Int) {
    /** The default code for unknown values. */
    Unknown(Int.MIN_VALUE),
    Default(0),
    RecipientAdd(1),
    RecipientRemove(2),
    Call(3),
    ChannelNameChange(4),
    ChannelIconChange(5),
    ChannelPinnedMessage(6),
    GuildMemberJoin(7),
    UserPremiumGuildSubscription(8),
    UserPremiumGuildSubscriptionTierOne(9),
    UserPremiumGuildSubscriptionTwo(10),
    UserPremiumGuildSubscriptionThree(11),
    ChannelFollowAdd(12),
    GuildDiscoveryDisqualified(14),
    @Suppress("SpellCheckingInspection")
    GuildDiscoveryRequalified(15);

    companion object MessageTypeSerializer : KSerializer<MessageType> {

        override val descriptor: SerialDescriptor
            get() = PrimitiveSerialDescriptor("type", PrimitiveKind.INT)

        override fun deserialize(decoder: Decoder): MessageType {
            val code = decoder.decodeInt()
            return values().firstOrNull { it.code == code } ?: Unknown
        }

        override fun serialize(encoder: Encoder, value: MessageType) {
            encoder.encodeInt(value.code)
        }
    }
}

